name: "Terraform"

on:
  push:
    branches: ["stage"]
  pull_request:

permissions:
  contents: read

jobs:
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v3

      # Set up AWS credentials
      - name: Set up AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Install the latest version of Terraform CLI
      - name: Install Terraform
        run: |
          wget https://releases.hashicorp.com/terraform/0.15.0/terraform_0.15.0_linux_amd64.zip
          unzip terraform_0.15.0_linux_amd64.zip
          sudo mv terraform /usr/local/bin/
          terraform --version

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init

      # Checks that all Terraform configuration files adhere to a canonical format
      # - name: Terraform Format
      #   run: terraform fmt -check

      # Generates an execution plan for Terraform

      # - name: Terraform Plan
      #   run: terraform plan -input=false

      # On push to "stage", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks

      - name: Terraform Apply
        if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
        run: terraform apply -auto-approve -input=false


      # - name: Terraform Destroy
      #   if: github.ref == 'refs/heads/stage' && github.event_name == 'push'
      #   run: terraform destroy -auto-approve -input=false
      - name: Extract private key file
        run: |
          terraform output private_key_file > private_key.pem
          echo "PRIVATE_KEY_FILE=private_key.pem" >> $GITHUB_ENV

      - name: Download private key artifact
        uses: actions/upload-artifact@v2
        with:
          name: private-key
          path: ec2-module

      # Optional: Verify the contents of the downloaded file
      - name: List downloaded files
        run: ls -l ec2-module

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli
      
      - name: Upload EC2 Key to S3
        run: |
          aws s3 cp ec2-module/private_key.pem s3://athenatableacceslaration/Github/
